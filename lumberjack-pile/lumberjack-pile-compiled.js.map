{"version":3,"sources":["lumberjack-pile.js"],"names":[],"mappings":";;;;QAAO,6BAA6B;;AACpC,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAEnC,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;;AAEnC,MAAM,CAAC,mBAAmB,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;;AAEvC,IAAI,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAA;AAC5D,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;AACvC,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,UAAS,IAAI,EAAE;AAAE,SAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE;AAAE,WAAO,CAAC,GAAG,CAAA;GAAE,CAAC,CAAA;CAAE,CAAC,CAAA;;iCAE5D,UAAU;;IAApD,UAAU;IAAE,WAAW;IAAE,aAAa;;AAE3C,IAAI,OAAO,GAAG,SAAV,OAAO,CAAY,IAAI,EAAE;AAC3B,SAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAA;CACpC,CAAA;;AAED,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACxD,MAAM,CAAC,eAAe,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAEjE,SAAQ;;AAER,SAAS,UAAU,CAAC,QAAQ,EAAE,cAAc,EAAE;AAC5C,MAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;;;;;;AAC3B,yBAAgB,QAAQ,8HAAE;UAAjB,GAAG;;;;;;AACV,8BAAiB,GAAG,mIAAE;cAAb,IAAI;;AACX,mBAAQ;AACR,cAAI,cAAc,GAAG,CAAC,EAAE;AACtB,gBAAI,IAAI,KAAK,GAAG,EAAE;AAChB,gBAAE,cAAc,CAAC;AACjB,gBAAE,IAAI,CAAC;aACR;WACF,MAAM;AACL,qBAAQ;WACT;SACF;;;;;;;;;;;;;;;KACF;;;;;;;;;;;;;;;CACF;;AAED,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;AAC1B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAA;;AAEnD,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA","file":"lumberjack-pile-compiled.js","sourcesContent":["import 'source-map-support/register'\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\nvar assert = require('./tiny-test')\n\nvar log = console.log.bind(console)\n\nassert('Test suite works.', true, true)\n\nvar data = fs.readFileSync(path.join(__dirname, 'easy.txt'))\nvar lines = data.toString().split(\"\\n\")\nvar splitLines = _.map(lines, function(line) { return line.split(\" \").map(function(num) { return +num }) })\n\nvar [dimensions, logsToPlace, existingPiles] = splitLines\n\nvar findMin = function(grid) {\n  return _.min(_.flatten(grid, true))\n}\n\nassert('findMin', 1, findMin([[1,1,1],[2,1,3],[1,4,1]]))\nassert('existingPiles', existingPiles, [[1,1,1],[2,1,3],[1,4,1]])\n\ndebugger\n\nfunction distribute(logPiles, numLogsToPlace) {\n  var min = findMin(logPiles)\n  for (var row of logPiles) {\n    for (var logs of row) {\n      debugger\n      if (numLogsToPlace > 0) {\n        if (logs === min) {\n          --numLogsToPlace;\n          ++logs;\n        }\n      } else {\n        debugger\n      }\n    }\n  }\n}\n\nconsole.log(existingPiles)\nconsole.log(distribute(existingPiles, logsToPlace))\n\nconsole.log(logsToPlace)\n\n\n// distrubute:\n// find MIN of all piles\n// EACH row\n  // EACH column\n    // IF DECREMENT logs\n      // INCREMENT row, column\n    // ELSE\n      // RETURN piles\n// IF logs is nonzero?\n  // distribute\n\n"]}